#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Customize to your needs...

# load path for bin
path+=~/bin
path+=~/.local/bin
path+=~/go/bin
path+=/run/media/dniwdeus/20b914b0-837a-46d5-ab7f-4f01aff92f03/tools/boxfuse
path+="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
path+="$PWD/_tools:$PATH"

# fetch git_status
parse_git_branch() {
    git_status="$(git status 2> /dev/null)"
    pattern="On branch ([^[:space:]]*)"
    if [[ ! ${git_status} =~ "(working (tree|directory) clean)" ]]; then
        state="*"
    fi
    if [[ ${git_status} =~ ${pattern} ]]; then
      branch=${match[1]}
      branch_cut=${branch:0:35}
      if (( ${#branch} > ${#branch_cut} )); then
          echo "(${branch_cut}â€¦${state})"
      else
          echo "(${branch}${state})"
      fi
    fi
}

# configure prompt
## show PWD and git-branch
setopt PROMPT_SUBST
PROMPT='%2~$(parse_git_branch)$'

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

if [ -f ~/.fresh/build/shell.sh ]; then
    source ~/.fresh/build/shell.sh
fi

##############
# kubernetes #
##############

function kube_resources() {
  local node_count=0
  local total_percent_cpu=0
  local total_percent_mem=0

  echo "NODE\t\t\t\t\t CPU_allocatable\t Memory_allocatable\t CPU_requests%\t Memory_requests%\t CPU_limits%\t Memory_limits%\t"
  for n in $(kubectl get nodes --no-headers -o custom-columns=NAME:.metadata.name); do
    local requests=$(kubectl describe node $n | grep -A2 -E "Resource" | tail -n1 | tr -d '(%)')
    local abs_cpu=$(echo $requests | awk '{print $2}')
    local percent_cpu=$(echo $requests | awk '{print $3}')
    local node_cpu=$(echo $abs_cpu $percent_cpu | tr -d 'mKi' | awk '{print int($1/$2*100)}')
    local allocatable_cpu=$(echo $node_cpu $abs_cpu | tr -d 'mKi' | awk '{print int($1 - $2)}')
    local percent_cpu_lim=$(echo $requests | awk '{print $5}')
    local requests=$(kubectl describe node $n | grep -A3 -E "Resource" | tail -n1 | tr -d '(%)')
    local abs_mem=$(echo $requests | awk '{print $2}')
    local percent_mem=$(echo $requests | awk '{print $3}')
    local node_mem=$(echo $abs_mem $percent_mem | tr -d 'mKi' | awk '{print int($1/$2*100)}')
    local allocatable_mem=$(echo $node_mem $abs_mem | tr -d 'mKi' | awk '{print int($1 - $2)}')
    local percent_mem_lim=$(echo $requests | awk '{print $5}')
    echo "$n\t ${allocatable_cpu}m\t\t\t ${allocatable_mem}Ki\t\t ${percent_cpu}%\t\t ${percent_mem}%\t\t\t ${percent_cpu_lim}%\t\t ${percent_mem_lim}%\t"

    node_count=$((node_count + 1))
    total_percent_cpu=$((total_percent_cpu + percent_cpu))
    total_percent_mem=$((total_percent_mem + percent_mem))
  done

  local avg_percent_cpu=$((total_percent_cpu / node_count))
  local avg_percent_mem=$((total_percent_mem / node_count))

  echo "Average usage (requests) : ${avg_percent_cpu}% CPU, ${avg_percent_mem}% memory."
}
